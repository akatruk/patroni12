---

- name: copy script
  template: 
    src: execute.sql.j2
    dest: /tmp/execute.sql
    backup: yes
  when: inventory_hostname == pci_dss_active_node

- name: exeute sql script
  shell: psql postgres -U postgres -h localhost -p 5432 -a -q -f /tmp/execute.sql
  become_user: postgres
  when: inventory_hostname == pci_dss_active_node
  register: output

- name: script result
  debug:
    msg: "{{ output }}"

- name: find and replcace in /var/lib/pgsql/12/data/patronictl/pg_hba.conf
  lineinfile:
    path: /var/lib/pgsql/12/data/patronictl/pg_hba.conf
    regexp: '^(.*)host replication postgres 10.10.1.0/24 md5(.*)$'
    line: 'host replication postgres 10.10.1.0/24 scram-sha-256'

- name: find and replcace in /var/lib/pgsql/12/data/patronictl/pg_hba.conf
  lineinfile:
    path: /var/lib/pgsql/12/data/patronictl/pg_hba.conf
    regexp: '^(.*)host all all 0.0.0.0/0 md5(.*)$' 
    line: 'host all all 0.0.0.0/0 scram-sha-256'

- name: restart patroni
  service:
    name: patroni.service
    state: restarted
  
# - name: add hosts to pg_hba.conf

# - name: change password to SHA256
#   shell: PGPASSWORD={{ password_postgres }} psql postgres -U postgres -h {{virtual_ip}} -p 5000 -c "alter role postgres with encrypted password '{{ password_postgres }}';"
#   become_user: postgres
#   when: inventory_hostname == pci_dss_active_node

# - name: change password to SHA256
#   shell: PGPASSWORD={{ password_postgres }} psql postgres -U postgres -h {{virtual_ip}} -p 5000 -c "alter role admin with encrypted password '{{ password_postgres }}';"
#   become_user: postgres
#   when: inventory_hostname == pci_dss_active_node

# - name: Unconditionally reboot the machine with all defaults
#   reboot:

